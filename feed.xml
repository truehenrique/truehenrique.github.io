<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog - @truehenrique</title>
  <subtitle>Artigos sobre Elixir, Ruby, carreira e desenvolvimento web. Pode conter uma pitada de filosofia. @TrueHenrique</subtitle>
  <id>https://truehenrique.com/</id>
  <link href="https://truehenrique.com/"/>
  <link href="https://truehenrique.com/feed.xml" rel="self"/>
  <updated>2022-02-17T19:17:00-03:00</updated>
  <author>
    <name>Henrique F. Teixeira</name>
  </author>
  <entry>
    <title>A linguagem de programação "bala de prata"</title>
    <link rel="alternate" href="https://truehenrique.com/2022/02/17/a-linguagem-de-programacao-bala-de-prata/"/>
    <id>https://truehenrique.com/2022/02/17/a-linguagem-de-programacao-bala-de-prata/</id>
    <published>2022-02-17T19:17:00-03:00</published>
    <updated>2022-02-18T15:15:18-03:00</updated>
    <author>
      <name>Henrique F. Teixeira</name>
    </author>
    <content type="html">&lt;p&gt;Neste artigo irei mostrar a conclusão de uma pesquisa feita por mim onde comparei algumas linguagens de programação e seus possíveis casos de uso, elencando as que conseguem ser efetivas em mais nichos possíveis em relação a aquelas que atingem apenas nichos específicos. Ah, não existe "bala de prata" de fato. Mas aqui pode haver "insights" para empresas sobre qual tecnologia pode se adaptar melhor dado cada contexto.&lt;/p&gt;

&lt;p&gt;Para a pesquisa selecionei as linguagens "mais populares" atualmente segundo estatísticas do &lt;em&gt;StackOverflow&lt;/em&gt; e &lt;em&gt;GitHub&lt;/em&gt; junto com algumas em crescimento no mercado:&lt;/p&gt;

&lt;p&gt;Populares:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Python, Javascript&lt;/em&gt; (e derivadas), &lt;em&gt;Go, Ruby, C++, C#&lt;/em&gt; e &lt;em&gt;Java&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Tendências:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kotlin, Elixir, Rust&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para elencar as linguagens selecionei alguns nichos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Mobile (iOS / Android)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Aplicações &lt;em&gt;Web&lt;/em&gt; / Micro Serviços&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;OS&lt;/em&gt; / Programação de aplicativos desktop (&lt;em&gt;GUI&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;Baixo nível&lt;/li&gt;
  &lt;li&gt;Alta performance &lt;em&gt;CPU-bound&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Concorrência / Paralelismo&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;CLI (command line interface)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ciência de dados&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Machine Learn&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Jogos&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;IOT&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para cada um deles pontuei de &lt;strong&gt;0&lt;/strong&gt; a &lt;strong&gt;3&lt;/strong&gt;, sendo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;0&lt;/strong&gt;, não atende de nenhuma maneira:
Não encontrei nenhum suporte para tal nicho, isso inclui ausência de frameworks, bibliotecas, recursos próprios e arquitetura da linguagem ou até limitações impostas por algum outro motivo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;, atende de forma bem escassa:
Encontrei algum suporte mas bem escasso, como: frameworks ou bibliotecas imaturas ou obsoletas e sua comunidade também não dá muita atenção para o determinado nicho.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2&lt;/strong&gt;, atende:
Encontrei bibliotecas e frameworks maduros e estáveis para determinado nicho, possui uma arquitetura favorável, mas claramente não é o foco da comunidade ou o principal uso da linguagem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3&lt;/strong&gt;, atende muito bem:
Encontrei foco da comunidade, arquitetura, bibliotecas e frameworks maduros, estáveis e populares. Além de várias pessoas recomendando a linguagem como sendo a mais adequada para o nicho.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;obs:. Não estou considerando pontos como "qualidade de código" ou "sintaxe", esses que de fato podem ser muito importantes na hora de considerar uma tecnologia ou outra. Também levando em conta que eles são bem mais complexos de medir e podem variar de time para time.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como fiz a pesquisa&lt;/p&gt;

&lt;h4 id="parte-1---entendendo-o-consenso-geral-da-comunidade"&gt;Parte 1 - Entendendo o consenso geral da comunidade.&lt;/h4&gt;

&lt;p&gt;Sendo X a linguagem, primeiro pesquisei "X main usage", depois, para cada nicho pesquisei "X for Y", "Y X library" e "X Y framework" sendo Y o nicho.&lt;/p&gt;

&lt;p&gt;A partir daí colhi informações e opiniões gerais de sites como Quora, Reddit, fóruns espalhados pela internet e cheguei a bibliotecas e frameworks no GitHub.&lt;/p&gt;

&lt;h4 id="parte-2---analisando-projetos-no-github"&gt;Parte 2 - Analisando projetos no GitHub.&lt;/h4&gt;

&lt;p&gt;Após chegar a páginas de projetos open source / bibliotecas e frameworks no GitHub, elenquei entre imaturo, maduro e estável da seguinte maneira:&lt;/p&gt;

&lt;p&gt;imaturo:
Projetos com pouca ou nenhuma atualização, muitas issues e poucos contribuidores.&lt;/p&gt;

&lt;p&gt;maduro e estável:
Projetos com atualização constante, populares, que existem a um tempo considerável e tem uma relação entre issues e contribuidores (issues / contributors) saudável.&lt;/p&gt;

&lt;h2 id="resultados"&gt;Resultados&lt;/h2&gt;

&lt;p&gt;Abaixo estão os resultados de cada linguagem de acordo com a minha percepção após fazer a pesquisa:&lt;/p&gt;

&lt;h4 id="python"&gt;Python&lt;/h4&gt;
&lt;p&gt;﻿
&lt;img src="/images/silver-bullet/python.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Sem nenhuma dúvida &lt;em&gt;Python&lt;/em&gt; é a "bola da vez" quando o assunto é ciência de dados e &lt;em&gt;IOT&lt;/em&gt;, no &lt;em&gt;GitHub&lt;/em&gt; é a linguagem com mais issues e repositórios relacionados aos temas (lado a lado com &lt;em&gt;Javascript&lt;/em&gt; para &lt;em&gt;IOT&lt;/em&gt;). Com a "simplicidade" no "core" de sua ideologia &lt;em&gt;Python&lt;/em&gt; é adotado de forma abrangente no meio acadêmico e por quem deseja se mais tornar produtivo com códigos extremamente legíveis.&lt;/p&gt;

&lt;p&gt;Fora de &lt;em&gt;IOT&lt;/em&gt; e &lt;em&gt;data science Python&lt;/em&gt; ainda é uma excelente aliada se precisarmos construir aplicações &lt;em&gt;web&lt;/em&gt;, &lt;em&gt;desktop, CLI&lt;/em&gt; e jogos simples com uma "enxurrada" de bibliotecas excelentes como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Django&lt;/strong&gt; &lt;em&gt;(&lt;a href="https://github.com/django/django"&gt;https://github.com/django/django&lt;/a&gt;)&lt;/em&gt;. Com 54.8k de stars e 2082 contribuidores coloco lado a lado com Ruby on Rails como uma das mais maduras e robustas ferramentas para desenvolvimento web.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Kivy&lt;/strong&gt; &lt;em&gt;(&lt;a href="https://kivy.org/"&gt;https://kivy.org/&lt;/a&gt;)&lt;/em&gt;. Uma biblioteca incrível para construção de aplicativos multi-plataforma, conseguimos compilar um projeto inteiramente escrito em Python para IOS, Android ou Desktop.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Para programas CLI: &lt;strong&gt;Alive progress, asciimatics e python-prompt-toolkit&lt;/strong&gt; &lt;em&gt;(&lt;a href="https://github.com/rsalmei/alive-progress"&gt;https://github.com/rsalmei/alive-progress&lt;/a&gt;, &lt;a href="https://github.com/peterbrittain/asciimatics"&gt;https://github.com/peterbrittain/asciimatics&lt;/a&gt;, &lt;a href="https://github.com/prompt-toolkit/python-prompt-toolkit"&gt;https://github.com/prompt-toolkit/python-prompt-toolkit&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pygame&lt;/strong&gt; &lt;em&gt;(&lt;a href="https://www.pygame.org/news"&gt;https://www.pygame.org/news&lt;/a&gt;)&lt;/em&gt;. Uma biblioteca com mais de 20 anos de estrada, com todos os recursos necessários para criar os mais diversos jogos.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;em&gt;"A Free and Open Source python programming language library for making multimedia applications like games built on top of the excellent SDL library. C, Python, Native, OpenGL. "&lt;/em&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Numpy&lt;/strong&gt; &lt;em&gt;(&lt;a href="https://numpy.org/devdocs/user/whatisnumpy.html"&gt;https://numpy.org/devdocs/user/whatisnumpy.html&lt;/a&gt;)&lt;/em&gt; Biblioteca escrita em &lt;em&gt;C&lt;/em&gt; muito utilizada em ciência de dados:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Numpy is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para concorrência e &lt;em&gt;CPU-bound Python&lt;/em&gt; parece não ser uma das melhores alternativas mas ainda sim há algo que possa se fazer para otimiza-lo nessas tarefas, como por exemplo, podemos criar processos evitando o &lt;em&gt;GIL (Global Interpreter Lock)&lt;/em&gt;:
&lt;em&gt;&lt;a href="https://docs.python.org/3/library/multiprocessing.html"&gt;https://docs.python.org/3/library/multiprocessing.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id="javascript-e-derivadas"&gt;Javascript (e derivadas)&lt;/h4&gt;
&lt;p&gt;﻿
﻿&lt;img src="/images/silver-bullet/javascript.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Quando dizem que &lt;em&gt;Javascript&lt;/em&gt; vai dominar o mundo pode haver um pouco de verdade. Junto com suas derivadas (&lt;em&gt;Typescript, Node, Deno&lt;/em&gt; e etc…) a linguagem consegue ter ferramentas para os mais diversos nichos, muitas que dispensam apresentação e comentários como: &lt;em&gt;Vue, React, Angular, Express, Nest, Next, Nuxt, Electron&lt;/em&gt; ou &lt;em&gt;React Native&lt;/em&gt;. Com Javascript conseguimos atingir a maioria das plataformas (&lt;em&gt;IOS, Android, Desktop, Debian, Windows&lt;/em&gt;), produzir aplicativos &lt;em&gt;CLI&lt;/em&gt; e desenvolver jogos com ferramentas maduras como &lt;a href="https://phaser.io/"&gt;https://phaser.io/&lt;/a&gt;, &lt;a href="https://github.com/pixijs/pixi.js"&gt;https://github.com/pixijs/pixi.js&lt;/a&gt; e &lt;a href="https://gdevelop-app.com/"&gt;https://gdevelop-app.com/&lt;/a&gt; não deixando a desejar em quase nada. A linguagem ainda é a que têm mais repositórios e issues relacionados a &lt;em&gt;IOT&lt;/em&gt; no GitHub.&lt;/p&gt;

&lt;p&gt;Para ciência de dados senti que podem faltar algumas ferramentas, apesar disso há bibliotecas bem legais para &lt;em&gt;machine learning&lt;/em&gt; como &lt;a href="https://github.com/BrainJS/brain.js#brainjs"&gt;https://github.com/BrainJS/brain.js#brainjs&lt;/a&gt;. Dependendo do projeto, consideraria dar uma comparada lado a lado com &lt;em&gt;Python&lt;/em&gt;, que provê um "arsenal" mais completo para o nicho. Muitas vezes podemos até acabar usando &lt;em&gt;Node&lt;/em&gt; e &lt;em&gt;Javascript&lt;/em&gt; em conjunto com &lt;em&gt;Python&lt;/em&gt;. Olha só que bacana esse site: &lt;a href="https://js4ds.org/"&gt;https://js4ds.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ainda sim, quando o assunto se torna alta performance, concorrência e baixo nível esta não parece ser a melhor escolha. Mas aí seria exigir demais, não é?&lt;/p&gt;

&lt;h4 id="ruby"&gt;Ruby&lt;/h4&gt;

&lt;p&gt;﻿&lt;img src="/images/silver-bullet/ruby.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;O nicho mais forte da linguagem &lt;em&gt;Ruby&lt;/em&gt; é web. O &lt;em&gt;framework Ruby on Rails&lt;/em&gt; com 47,5k de &lt;em&gt;stars&lt;/em&gt;, 4260 contribuidores e apenas 340 &lt;em&gt;issues&lt;/em&gt; (o que da em média , 0.07 &lt;em&gt;issues&lt;/em&gt; por pessoas que já contribuiram) sem dúvida é uma das peças de &lt;em&gt;software&lt;/em&gt; mais robustas e maduras do mercado, fortemente utilizado por &lt;em&gt;GitHub, Shopify, Gitlab, Airbnb&lt;/em&gt; e por aí vai, a experiência se traduz em 15 anos de um projeto que inspirou o resto da web inteira em 2005 e até hoje continua inovando e se colocando no nível ou até a frente de suas "cópias" em outras linguagens. Além do &lt;em&gt;Ruby on Rails&lt;/em&gt;, a linguagem ainda conta com inúmeras bibliotecas que deixam a produtividade alta para quem quer desenvolver para Web, como: &lt;em&gt;Devise, Jekyll, Hotwire, Sinatra, Roda, Hanami&lt;/em&gt; e etc…&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ruby&lt;/em&gt; também apresenta ótimos recursos para construção de CLI. Além da sintaxe focada em produtividade e no bem estar do programador, temos bibliotecas maduras como &lt;a href="https://github.com/piotrmurach/tty"&gt;https://github.com/piotrmurach/tty&lt;/a&gt;, &lt;a href="https://github.com/fazibear/colorize"&gt;https://github.com/fazibear/colorize&lt;/a&gt; e &lt;a href="https://github.com/jfelchner/ruby-progressbar"&gt;https://github.com/jfelchner/ruby-progressbar&lt;/a&gt;. Alguns programas &lt;em&gt;CLI&lt;/em&gt; notórios são escritos com a linguagem, como: &lt;em&gt;Homebrew, Vagrant e Chef&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Tirando esses dois nichos, há projetos bem legais como &lt;a href="https://github.com/hybridgroup/artoo"&gt;https://github.com/hybridgroup/artoo&lt;/a&gt; para &lt;em&gt;IOT&lt;/em&gt;, &lt;a href="https://github.com/shoes/shoes4"&gt;https://github.com/shoes/shoes4&lt;/a&gt; e &lt;a href="https://github.com/AndyObtiva/glimmer"&gt;https://github.com/AndyObtiva/glimmer&lt;/a&gt; para construção de &lt;em&gt;GUI&lt;/em&gt;, Inclusive fiquei surpreso com a quantidade de bibliotecas para &lt;em&gt;Machine Learning&lt;/em&gt;: &lt;a href="https://github.com/arbox/machine-learning-with-ruby"&gt;https://github.com/arbox/machine-learning-with-ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na sua versão 3 lançada no final de 2020 a linguagem ganhou suporte a concorrência, um início de tipagem estática e um &lt;em&gt;boost&lt;/em&gt; de performance &lt;em&gt;CPU-Bound&lt;/em&gt;, que podem trazer, quem sabe, mais recursos e atenção para outros nichos.&lt;/p&gt;

&lt;h4 id="c"&gt;C++&lt;/h4&gt;
&lt;p&gt;﻿
﻿&lt;img src="/images/silver-bullet/cplusplus.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;C++&lt;/em&gt; Apesar de ser uma das mais antigas da lista, ainda é largamente utilizada e cumpre muito bem o seu papel, sendo uma das principais quando lidamos com questões de baixo nível, alta performance e jogos. Sem dúvidas podemos fazer qualquer coisa com &lt;em&gt;C++&lt;/em&gt; e muito bem, mas entendi que uma das barreiras de sua escolha em determinados nichos é a complexidade e a preferência geral por linguagens mais simples, isso acaba acarretando em menos &lt;em&gt;frameworks&lt;/em&gt; e &lt;em&gt;bibliotecas&lt;/em&gt;, como no caso de &lt;em&gt;web, microserviços&lt;/em&gt; e até ciência de dados e &lt;em&gt;machine learn&lt;/em&gt; onde a maior parte da comunidade é acadêmica. Para jogos &lt;em&gt;C++&lt;/em&gt; é uma escolha notória, veja alguns dos títulos escritos com a linguagem:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Battlefield&lt;/em&gt;
&lt;em&gt;Word of Warcraft&lt;/em&gt;
&lt;em&gt;League of Legends&lt;/em&gt;
&lt;em&gt;GTA San Andreas&lt;/em&gt;
&lt;em&gt;DOOM&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Também encontrei um projeto bem legal para criação de aplicações mobile multi plataforma: &lt;a href="https://www.boden.io/"&gt;https://www.boden.io/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="c-1"&gt;C#&lt;/h4&gt;
&lt;p&gt;﻿
﻿&lt;img src="/images/silver-bullet/csharp.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Sem me prolongar muito, &lt;em&gt;C#&lt;/em&gt; provavelmente é uma ótima escolha para atacar a grande maioria dos nichos, principalmente se o foco é &lt;em&gt;Windows&lt;/em&gt;. A linguagem tem grande flexibilidade, &lt;em&gt;frameworks&lt;/em&gt; ótimos e performance invejável. Veja algumas das ferramentas que teremos no nosso "arsenal" ao escolhermos utilizar &lt;em&gt;C#&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;.NET core: &lt;em&gt;Framework&lt;/em&gt; multiplataforma extramemente robusto, focado em performance e alta escalabilidade para desenvolvimento de aplicações &lt;em&gt;Web, Desktop&lt;/em&gt; e &lt;em&gt;CLI&lt;/em&gt;. É utilizado por empresas como &lt;em&gt;Stack Overflow&lt;/em&gt; e &lt;em&gt;Godaddy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Xamarin: &lt;em&gt;Framework&lt;/em&gt; extremamente maduro e robusto para desenvolvimento de aplicações &lt;em&gt;mobile&lt;/em&gt; nativas e multiplataforma, pode ser considerado por muitos como a melhor opção para o nicho! O Xamarin é de fato uma ferramente fantástica, veja mais em:
&lt;a href="https://docs.microsoft.com/pt-br/xamarin/get-started/what-is-xamarin"&gt;https://docs.microsoft.com/pt-br/xamarin/get-started/what-is-xamarin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unity: C# é a linguagem principal de uma das principais e mais populares ferramentas para criação de jogos.
&lt;a href="https://unity.com/pt"&gt;https://unity.com/pt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não há dúvidas que &lt;em&gt;C#&lt;/em&gt; se daria muito bem para tarefas de &lt;em&gt;Data Science&lt;/em&gt;, mas claramente não há vontade dos cientistas de dados em sair do Python! Utilizando C# para algum projeto de Data Science com certeza teríamos que "re-inventar a roda" em algum momento. Ainda sim há projetos maravilhosos para o Nicho, veja: &lt;a href="https://github.com/SciSharp"&gt;https://github.com/SciSharp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Em &lt;em&gt;IOT&lt;/em&gt; também temos uma atenção interessante por parte da &lt;em&gt;Microsoft&lt;/em&gt;: &lt;a href="https://dotnet.microsoft.com/apps/iot"&gt;https://dotnet.microsoft.com/apps/iot&lt;/a&gt;&lt;/p&gt;

&lt;h4 id="java--kotlin"&gt;Java / Kotlin&lt;/h4&gt;
&lt;p&gt;﻿
﻿&lt;img src="/images/silver-bullet/java.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Outra grande escolha para atacar a maioria dos nichos são as linguagens da &lt;em&gt;JVM&lt;/em&gt;. O ecossitema de ferramentas, bibliotecas e &lt;em&gt;frameworks&lt;/em&gt; feitos é gigante. Vale ressaltar que adicionei &lt;em&gt;Java&lt;/em&gt; e &lt;em&gt;Kotlin&lt;/em&gt; juntos porque &lt;em&gt;Kotlin&lt;/em&gt; é 100% compatível com &lt;em&gt;Java&lt;/em&gt; e a maioria das ferramentas servem para as ambas igualmente.&lt;/p&gt;

&lt;p&gt;Mobile:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Java&lt;/em&gt; é a linguagem principal dentro de desenvolvimento &lt;em&gt;Android&lt;/em&gt; e &lt;em&gt;Kotlin&lt;/em&gt; nos trás possibilidades para desenvolver também para &lt;em&gt;IOS&lt;/em&gt; (&lt;a href="https://kotlinlang.org/lp/mobile/"&gt;https://kotlinlang.org/lp/mobile/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Machine Learn / Ciência de dados:&lt;/p&gt;

&lt;p&gt;Graças a sua performance, muitos podem indica-la como sendo a escolha perfeita para tarefas mais intensivas de &lt;em&gt;ML&lt;/em&gt;, depois de Python, é uma das linguagens mais populares no nicho.
&lt;em&gt;Fink, Hadoop, Hive&lt;/em&gt; e &lt;em&gt;Spark&lt;/em&gt; são algumas das principais ferramentas para &lt;em&gt;Big Data&lt;/em&gt;, que anda lado a lado com Ciência de dados.&lt;/p&gt;

&lt;p&gt;Jogos:&lt;/p&gt;

&lt;p&gt;Diversos títulos foram escritos com a linguagem, como: &lt;em&gt;Minecraft, Runescape&lt;/em&gt; e &lt;em&gt;FIFA 11&lt;/em&gt;. Além de ser uma escolhe versátil para o nicho, &lt;em&gt;Java&lt;/em&gt; é predominante no desenvolvimento de jogos para &lt;em&gt;Android&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;CLI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://picocli.info/"&gt;https://picocli.info/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Java&lt;/em&gt; está na &lt;em&gt;web&lt;/em&gt; desde os primórdios dos anos 2000. Sempre evoluindo, não deixa nada a desejar hoje em dia com &lt;em&gt;frameworks&lt;/em&gt; mega-robustos como &lt;em&gt;Spring&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;IOT:&lt;/p&gt;

&lt;p&gt;Aplicativos Desktop:&lt;/p&gt;

&lt;h4 id="elixir"&gt;Elixir&lt;/h4&gt;
&lt;p&gt;﻿
﻿﻿&lt;img src="/images/silver-bullet/elixir.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Elixir&lt;/em&gt; tem todos os requisitos para ser considerada a mais robusta ferramenta quando o assunto é concorrência e paralelismo: A linguagem tem total compatibilidade com &lt;em&gt;Erlang/OTP&lt;/em&gt; e é escrita em cima da &lt;em&gt;Erlang VM&lt;/em&gt; (tecnologia por trás do &lt;em&gt;Whatsapp, Facebook messenger&lt;/em&gt;), além de adotar o paradigma funcional, imutabilidade e vários conceitos que ajudam a escrever códigos extremamente assertivos e eficientes para esse nicho, como o &lt;em&gt;Actor Model&lt;/em&gt;. O resultado disso é que a linguagem tem se tornado a escolha definitiva para empresas como &lt;em&gt;Discord, Stone, MasterCard, Sumup, Square Enix&lt;/em&gt; entre outras.&lt;/p&gt;

&lt;p&gt;Sua maturidade com concorrência e paralelismo também a tornam uma das melhores tecnologias para aplicações &lt;em&gt;web&lt;/em&gt; e microserviços. A escalabilidade que ganhamos utilizando o &lt;em&gt;framework Phoenix&lt;/em&gt; (&lt;a href="https://www.phoenixframework.org"&gt;https://www.phoenixframework.org&lt;/a&gt;) é em todos os sentidos: desde qualidade de código até alta performance, escalando verticalmente ou horizontamente, executando milhões de conexões &lt;em&gt;websocket&lt;/em&gt; simultâneas e etc… &lt;em&gt;Elixir&lt;/em&gt; e &lt;em&gt;Phoenix&lt;/em&gt; utilizam os recursos da máquina como CPU's e memória de forma extremamente eficiente.&lt;/p&gt;

&lt;p&gt;Para &lt;em&gt;IOT&lt;/em&gt; também existem projetos que atingiram uma boa maturidade como o &lt;em&gt;Nerves&lt;/em&gt; (&lt;a href="https://github.com/nerves-project/nerves"&gt;https://github.com/nerves-project/nerves&lt;/a&gt;) e o &lt;em&gt;Scenic&lt;/em&gt; (&lt;a href="https://github.com/nerves-project/nerves"&gt;https://github.com/boydm/scenic&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Em Ciência de dados e &lt;em&gt;Machine Learning&lt;/em&gt; há uma crescente movimentação da comunidade para explorar o potencial da linguagem, veja:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ZgPwqN38xaA&amp;amp;feature=emb_logo"&gt;https://www.youtube.com/watch?v=ZgPwqN38xaA&amp;amp;feature=emb_logo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.erlang-solutions.com/blog/how-to-build-a-machine-learning-project-in-elixir/"&gt;https://www.erlang-solutions.com/blog/how-to-build-a-machine-learning-project-in-elixir/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://towardsdatascience.com/tagged/elixir"&gt;https://towardsdatascience.com/tagged/elixir&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Recentemente foi criada a biblioteca Nx, por José Valim: &lt;a href="https://dashbit.co/blog/elixir-and-machine-learning-nx-v0.1"&gt;https://dashbit.co/blog/elixir-and-machine-learning-nx-v0.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fora esses nichos, é bem difícil encontrar alguma atenção da comunidade, no máximo uma ou outra biblioteca em estágio bem inicial.&lt;/p&gt;

&lt;h4 id="rust"&gt;Rust&lt;/h4&gt;
&lt;p&gt;﻿
﻿﻿&lt;img src="/images/silver-bullet/rust.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rust&lt;/em&gt; é uma linguagem que pode receber o título de "C moderna". Foi criada justamente para facilitar a criação de tasks "baixo nível" com uma sintaxe bem próxima a linguagens de "alto nível", o que a torna uma das linguagens mais amadas por desenvolvedores segundo pesquisas do &lt;em&gt;StackOverflow&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rust held the top spot for most loved technology for the fifth year in a row&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Seu ecossistema ainda é um tanto "enxuto", mas há um potencial para &lt;em&gt;Rust&lt;/em&gt; se tornar uma das linguagens mais importantes dos próximos tempos. Suas características permitem que ela tenha todos os recursos necessários para atingir com extrema excelencia todos os nichos:&lt;/p&gt;

&lt;p&gt;Performance extrema
Sintaxe moderna
Gerenciamento de memória eficiente&lt;/p&gt;

&lt;p&gt;Em relação a comunidade, encontrei maior maturidade nos seguintes nichos:&lt;/p&gt;

&lt;p&gt;Aplicações Web / Microserviços
&lt;a href="https://rocket.rs/"&gt;https://rocket.rs/&lt;/a&gt;
&lt;a href="https://actix.rs/"&gt;https://actix.rs/&lt;/a&gt;
&lt;a href="https://github.com/koute/stdweb"&gt;https://github.com/koute/stdweb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jogos
&lt;a href="https://amethyst.rs/"&gt;https://amethyst.rs/&lt;/a&gt;
&lt;a href="https://ggez.rs/"&gt;https://ggez.rs/&lt;/a&gt;
&lt;a href="https://bevyengine.org/"&gt;https://bevyengine.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CLI
&lt;a href="https://github.com/clap-rs/clap"&gt;https://github.com/clap-rs/clap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para &lt;em&gt;Machine Learning&lt;/em&gt; e &lt;em&gt;Data Science&lt;/em&gt; enxerguei bastante potencial, mas sinto que ainda falta engajamento da comunidade.&lt;/p&gt;

&lt;h4 id="go"&gt;Go&lt;/h4&gt;
&lt;p&gt;﻿
﻿﻿&lt;img src="/images/silver-bullet/go.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Go&lt;/em&gt; vem em grande ascenção no mercado desde a sua criação nos escritórios da gigante &lt;em&gt;Google&lt;/em&gt;, e por vários motivos:&lt;/p&gt;

&lt;p&gt;Compila em qualquer plataforma e para qualquer plataforma (de forma extremamente rápida), o que é uma grande vantagem em comparação a grande maioria das linguagens e a torna uma escolha excelente para aplicações multiplataforma. Em nenhuma outra linguagem que pesquisei encontrei bibliotecas tão maduras para &lt;em&gt;CLI's&lt;/em&gt; como &lt;a href="https://github.com/spf13/cobra"&gt;https://github.com/spf13/cobra&lt;/a&gt; ou &lt;a href="https://github.com/urfave/cli"&gt;https://github.com/urfave/cli&lt;/a&gt;. Não é "a toa" que aplicações como &lt;em&gt;Docker&lt;/em&gt; foram escritas com &lt;em&gt;Go&lt;/em&gt;. Também temos ótimas bibliotecas para &lt;em&gt;GUI's&lt;/em&gt; como &lt;a href="https://github.com/fyne-io/fyne"&gt;https://github.com/fyne-io/fyne&lt;/a&gt; e &lt;a href="https://github.com/andlabs/ui"&gt;https://github.com/andlabs/ui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É rápida e performática, tornando-a excelente para qualquer aplicação que pode necessitar de alto desempenho: &lt;em&gt;web, microserviços críticos&lt;/em&gt; e &lt;em&gt;jogos&lt;/em&gt;, por exemplo. Para &lt;em&gt;web&lt;/em&gt; e microserviços temos uma cartela cheia de ótimas opções: &lt;em&gt;Gin, Beego, Revel, Martini, Buffalo&lt;/em&gt; e por aí vai. Para jogos temos com maior destaque as bibliotecas &lt;a href="https://github.com/faiface/pixel"&gt;https://github.com/faiface/pixel&lt;/a&gt; e &lt;a href="https://ebiten.org/"&gt;https://ebiten.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;É muito simples e fácil de aprender, o que facilita para novos desenvolvedores.&lt;/p&gt;

&lt;p&gt;Tem suporte nativo, fácil e muito eficiente para lidarmos com concorrência e paralelismo, com os "&lt;em&gt;go channels&lt;/em&gt; e &lt;em&gt;routines&lt;/em&gt;" é sem dúvida uma das melhores escolhas para escrever aplicações que tenham esses requisitos como fundamentais (apesar de considerar &lt;em&gt;Elixir&lt;/em&gt; como superior nesse quesito, graças suas características funcionais a excelente &lt;em&gt;Erlang VM&lt;/em&gt; e &lt;em&gt;OTP&lt;/em&gt;, ainda pretendo escrever um artigo sobre isso).&lt;/p&gt;

&lt;p&gt;Na minha opinião muitas bibliotecas tendem a surgir nos próximos anos com sua popularidade crescendo e não consigo enxergar uma limitação que faça Go não se tornar uma escolha totalmente viável para quase todos os nichos em um futuro não muito distante! (deixando a parte de baixo nível e gerenciamento de memória um pouco de lado).&lt;/p&gt;

&lt;h2 id="concluso"&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Atualmente é impossível atingir todos o nichos com excelência utilizando uma linguagem só, de fato. Apesar da maioria delas serem de propósito geral, a influência e direcionamento das comunidades é evidente. &lt;em&gt;Ruby&lt;/em&gt; poderia ser uma excelente escolha para &lt;em&gt;Data Science&lt;/em&gt; se no meio acadêmico fosse popular e a comunidade trabalhasse em ferramentas assim como aconteceu com &lt;em&gt;Python&lt;/em&gt;…&lt;/p&gt;

&lt;p&gt;Aqui vai o nosso ranking de "linguagem bala de prata" pela soma de pontos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Java / Kotlin: 28&lt;/li&gt;
  &lt;li&gt;C#: 26&lt;/li&gt;
  &lt;li&gt;C++: 25&lt;/li&gt;
  &lt;li&gt;Python, Go, Rust e Javascript: 23&lt;/li&gt;
  &lt;li&gt;Elixir: 18&lt;/li&gt;
  &lt;li&gt;Ruby: 17&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;E aqui pela quantidade de nichos com 2 pontos ou mais:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Java / Kotlin, C# e C++: 10&lt;/li&gt;
  &lt;li&gt;Python, Go e Javascript: 8&lt;/li&gt;
  &lt;li&gt;Rust: 7&lt;/li&gt;
  &lt;li&gt;Ruby e Elixir: 6&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Devo querer que minha empresa tenha uma &lt;em&gt;stack&lt;/em&gt; mais homogênea, com menos linguagens possíveis?&lt;/p&gt;

&lt;p&gt;Depende, se tratando da maioria das empresas, não. É literalmente impossível e até ruim querer manter uma linguagem só dentro de uma empresa. Não há nenhuma vantagem: Um desenvolvedor que coda &lt;em&gt;Web e Mobile&lt;/em&gt; muito provavelmente não será o mesmo que irá codar a parte de &lt;em&gt;Data Science&lt;/em&gt; ou &lt;em&gt;Devops&lt;/em&gt;. O "homogêneo" deve partir de um nicho e não de uma &lt;em&gt;stack&lt;/em&gt;. E um nicho é naturalmente separado, "não homogêneo" em relação as suas comunidades e tecnologias. Resumindo:&lt;/p&gt;

&lt;p&gt;Se você é dono de uma empresa procure escolher a linguagem ideal para cada nicho e não uma linguagem que cubra todos ou a maioria dos nichos.
Porém, se você é um desenvolvedor solo "full-mega-blaster-stack" que tem novas idéias para &lt;em&gt;startups&lt;/em&gt; ou pega "freelas" dos mais variados e precisa codar tudo sozinho pode ser interessante e produtivo escolher fazer mais com menos linguagens possíveis.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Single responsibility, o princípio deturpado</title>
    <link rel="alternate" href="https://truehenrique.com/2021/10/27/single-responsibility-o-principio-deturpado/"/>
    <id>https://truehenrique.com/2021/10/27/single-responsibility-o-principio-deturpado/</id>
    <published>2021-10-27T14:23:00-03:00</published>
    <updated>2021-11-03T18:29:24-03:00</updated>
    <author>
      <name>Henrique F. Teixeira</name>
    </author>
    <content type="html">&lt;p&gt;Softwares são feitos por humanos, para humanos e máquinas. E humanos erram, consequentemente fazendo a máquina falhar também.&lt;/p&gt;

&lt;p&gt;Dado esse contexto, ao longo do tempo foram desenvolvidos e estabelecidos diversos princípios e padrões de desenvolvimento de software. E todos eles tem uma coisa em comum: &lt;strong&gt;simplificar para que consigamos trabalhar utilizando menos esforço cognitivo&lt;/strong&gt;, dado que a nossa mente é limitada e os problemas que temos que resolver muitas vezes já são complexos o suficiente apenas em seu conceito, sem nenhuma linha de código escrita.&lt;/p&gt;

&lt;p&gt;Isso é um &lt;em&gt;insight&lt;/em&gt; muito importante que tive depois de passar por diversos projetos ao longo da minha carreira, no começo não é fácil entender apesar de parecer simples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SOLID&lt;/li&gt;
  &lt;li&gt;MVC&lt;/li&gt;
  &lt;li&gt;DDD (Domain driven design)&lt;/li&gt;
  &lt;li&gt;Clean Architecture&lt;/li&gt;
  &lt;li&gt;Clean Code&lt;/li&gt;
  &lt;li&gt;Refactoring / Code Smells&lt;/li&gt;
  &lt;li&gt;TDD&lt;/li&gt;
  &lt;li&gt;Redux&lt;/li&gt;
  &lt;li&gt;Microservices&lt;/li&gt;
  &lt;li&gt;Microfrontends&lt;/li&gt;
  &lt;li&gt;Orientação a objetos (Encapsulamento, herança, polimorfismo, modelos anêmicos, sobrecarga …)&lt;/li&gt;
  &lt;li&gt;Programação funcional (Monads, funtores, closures, currying, teoria das categorias, funções puras …)&lt;/li&gt;
  &lt;li&gt;Actor Model&lt;/li&gt;
  &lt;li&gt;Lei de Demeter&lt;/li&gt;
  &lt;li&gt;Serveless&lt;/li&gt;
  &lt;li&gt;Web components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E além do software:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Agile&lt;/li&gt;
  &lt;li&gt;Scrum&lt;/li&gt;
  &lt;li&gt;Kanbam&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pra que a gente aprende e estuda essa p*** toda?&lt;/p&gt;

&lt;p&gt;A resposta pode parecer óbvia:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;"Aprendemos e estudamos para utilizar no nosso dia a dia, sempre, e essas são as melhores práticas."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mas será que essa é a resposta certa mesmo?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Não&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Existem contextos em que não precisamos utilizar nada disso e vários outros que nos beneficiaríamos utilizando apenas alguns desses padrões e práticas, não todos. Dessa forma, a minha resposta hoje em dia, seria:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;"Aprendemos e estudamos para saber onde e quando utilizar no nosso dia a dia"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Acontece que essa resposta só surge junto com a vivência, a realidade. E muitas vezes no início de carreira e durante muito tempo nos pegamos utilizando padrões apenas por ter estudado recentemente e assumir que é aquilo que devemos fazer, afinal é um padrão! É o correto!&lt;/p&gt;

&lt;p&gt;Essa última frase resulta em dois dos maiores problemas que particulamente enfrentei ao longo da carreira, vindo de código legado (ou a partir de mim mesmo):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Overengineering&lt;/strong&gt;: Engenharia e padrões demais para um problema simples&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Underengineering&lt;/strong&gt; (acabei de inventar esse termo): Engenharia e padrões de menos para um problema complexo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E esses problemas, são coisas que cursos de &lt;em&gt;"javascript full-stack"&lt;/em&gt;, &lt;em&gt;frameworks&lt;/em&gt; ou linguagens geralmente não vão nos ensinar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Todo padrão foi criado a partir de um problema&lt;/strong&gt;. Se não passamos por esse problema, não precisamos do padrão. E reconhecer fortemente o problema é tão ou mais importante do que conhecer os detalhes de um padrão. Nosso trabalho como &lt;em&gt;Software Engineer&lt;/em&gt; é justamente trabalhar sem &lt;em&gt;"over"&lt;/em&gt; e sem &lt;em&gt;"under"&lt;/em&gt; apenas com o &lt;em&gt;"engineer"&lt;/em&gt;. Primeiro reconhecer os problemas, depois encaixar os padrões (e não a ordem inversa).&lt;/p&gt;

&lt;p&gt;Dado essa introdução, gostaria de falar agora sobre um "caso ímpar" e muito curioso:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Um padrão / princípio onde é muito comum a galera não reconhecer o problema que ele soluciona de fato e nem mesmo como ele funciona, mas sai "utilizando" (e "pregando") em todo lugar. Provavelmente isso é resultado de um "telefone sem fio" gigante entre desenvolvedores (um fala para o outro, o outro escuta e fala para mais um seguidamente e nenhum deles busca de fato entender a fundo), outro ponto que pode ter resultado nisso é a simplicidade do seu nome:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="single-responsibility-principle-o-princpio-da-responsabilidade-nica"&gt;Single Responsibility Principle (O princípio da responsabilidade única)&lt;/h2&gt;

&lt;p&gt;Diferente de "Princípio da substituição de Liskov", "&lt;em&gt;Chain of responsibility&lt;/em&gt;" ou "Lei de Demeter", é muito fácil lermos "Princípio da responsabilidade única" e pensar:&lt;/p&gt;

&lt;p&gt;"Opa! Princípio da responsabilidade única, essa classe faz mais do que uma coisa! Ela tem mais de uma responsabilidade! Vamos transforma-la em duas"&lt;/p&gt;

&lt;p&gt;É simples. Métodos, classes e todo organismo dentro de um &lt;em&gt;software&lt;/em&gt; deve ter "uma única responsabilidade", não é mesmo?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Depende do que entendemos como responsabilidade&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para exemplificar, gosto muito de utilizar o dicionário:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Responsabilidade: Obrigação de responder pelas ações próprias ou dos outros. Caráter ou estado do que é responsável. &lt;strong&gt;Dever de responder pelo próprio comportamento.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Marquei a última sentença pois será mais simples de utilizar com o exemplo abaixo:&lt;/p&gt;

&lt;p&gt;Imagine que você é um entregador ou uma entregadora de pizza, qual é a sua responsabilidade e qual é o comportamento pelo qual você responde?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Imaginou?&lt;/p&gt;

&lt;p&gt;Eu diria que:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Responsabilidade: Entregar a pizza&lt;/li&gt;
  &lt;li&gt;Comportamento pelo qual responde: Guardar a pizza na mochila de forma cuidadosa para que ela chegue inteira, ligar a moto, acelerar a moto, pilotar com segurança se atentando as leis de trânsito, interfonar quando chegar e ser educado/a com o cliente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Temos mais de uma responsabilidade? Ou temos comportamentos pelos quais respondemos dado a nossa responsabilidade?&lt;/p&gt;

&lt;p&gt;Usando exemplos do mundo real fica mais claro, correto?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Então vou piorar o exemplo, nosso próprio corpo de entregador/a de pizza tem orgãos, e eles também tem suas responsabilidades:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;O coração bate e responde pela circulação do sangue&lt;/li&gt;
  &lt;li&gt;O pulmão respira e responde por absorver O2 e eliminar CO2 do ar respirado&lt;/li&gt;
  &lt;li&gt;Os rins filtram e respondem pela quantidade de detritos no nosso sangue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sabendo disso, como entregadores/as de pizza temos muito mais responsabilidades do que imaginamos? Também temos que ter nosso corpo funcionando bem para conseguir exercer a profissão correto?&lt;/p&gt;

&lt;p&gt;Como entreagores/as de pizza, respondemos pelo comportamento e responsabilidades do nosso corpo?&lt;/p&gt;

&lt;p&gt;Nessa altura você deve estar bastante confuso ou confusa. As coisas começaram a tomar proporções grandes que provavelmente fizeram você ter um esforço cognitivo muito maior para entender toda a complexidade que envolve o "princípio da responsabilidade única", o significado de responsabilidade e comportamento.&lt;/p&gt;

&lt;p&gt;Olhando o primeiro exemplo parece claro o que é responsabilidade e comportamento, mas quando te trouxe o segundo provavelmente você percebeu que isso pode ser infinito, e tomar proporções gigantes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Poderia finalizar o artigo aqui, para bons entendedores e endendedoras meia palavra basta&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mas vou continuar. Fazendo uma "analogia da analogia" a nível de &lt;em&gt;software&lt;/em&gt;, essa confusão fica exposta da pior maneira possível e aumenta da mesma forma o nosso esforço cognitivo, indo contra &lt;strong&gt;simplificar para que consigamos trabalhar utilizando menos esforço cognitivo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Se isso fosse um &lt;em&gt;software&lt;/em&gt;, eu não me espantaria de abrir os arquivos e ver coisas como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;"EntregadorDePizza"&lt;/li&gt;
  &lt;li&gt;"EntregadorDePizzaBuilder"&lt;/li&gt;
  &lt;li&gt;"LigadorDeMoto"&lt;/li&gt;
  &lt;li&gt;"MantemRimFuncionandoService"&lt;/li&gt;
  &lt;li&gt;"AceleradorDeMoto"&lt;/li&gt;
  &lt;li&gt;"PilotagemComSegurança"&lt;/li&gt;
  &lt;li&gt;"CuidadosComAPizza.Cuidar()"&lt;/li&gt;
  &lt;li&gt;"BatimentosDoCoração.Bater()"&lt;/li&gt;
  &lt;li&gt;"BatimentosDoCoraçãoFactory.create()"&lt;/li&gt;
  &lt;li&gt;"EntregarPizzaFacade"&lt;/li&gt;
  &lt;li&gt;"PizzaServices"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aquele "código gostoso" com alta granularidade, várias injeções de dependências e várias classes de apenas um método com "cinco, dez linhas de código", "respeitando a &lt;em&gt;Single Responsibility Principle&lt;/em&gt; até o final"!&lt;/p&gt;

&lt;p&gt;Muito fácil de dar manutenção, inclusive &lt;em&gt;(contêm ironia)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;No final das contas, esse tipo de situação causa um &lt;em&gt;software&lt;/em&gt; que é "estruturado lateralmente" (não existe mais Orientação a Objetos ou Programação funcional). Ao invés de termos uma leitura de código de cima para baixo, vamos acabar abrindo "20" arquivos na nossa &lt;em&gt;IDE&lt;/em&gt; para entender uma única regra de negócio que muitas vezes pode representar comportamentos de uma única responsabilidade (em "20" arquivos).&lt;/p&gt;

&lt;p&gt;Ao invés de encontrar o que procuramos em um ponto central, em um arquivo único, temos que procurar em vários arquivos e depois ligá-los mentalmente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;É a mesma coisa que juntar peças de um quebra cabeça gigante.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;E ainda falo sobre o menos pior dos casos! Porque essa granularidade pode acabar partindo para projetos diferentes, &lt;em&gt;microserviços&lt;/em&gt; ou &lt;em&gt;microfrontends&lt;/em&gt;. Imagina ter que abrir 10 &lt;em&gt;microserviços&lt;/em&gt; + 5 &lt;em&gt;microfrontends&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;O que acontece é que muita gente ainda não faz idéia da diferença entre &lt;strong&gt;responsabilidade&lt;/strong&gt; e &lt;strong&gt;comportamento&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O próprio Uncle Bob (criador do princípio) disse em um de seus livros:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;"De todos os princípios SOLID, o princípio da responsabilidade única provavelmente é o menos compreendido. Isso se deve, possivelmente ao seu nome bastante inadequado. Em geral, ao escutarem esse nome, os programadores imaginam logo que todos os módulos devem fazer apenas uma coisa"&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Robert C. Martin - Clear Architecture (Arquitetura Limpa) p/ 62&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Voltando ao nosso exemplo, temos apenas &lt;strong&gt;uma&lt;/strong&gt; responsabilidade: &lt;strong&gt;Entregar a pizza.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Porque podemos afirmar isso?&lt;/p&gt;

&lt;p&gt;O método e o comportamento são independentes da responsabilidade. Continuamos sendo apenas &lt;strong&gt;entregadores/as de pizzas&lt;/strong&gt; com a responsabilidade única de &lt;strong&gt;entregar pizzas&lt;/strong&gt; independente de como fazemos isso.&lt;/p&gt;

&lt;p&gt;Posso por exemplo começar a entregar de carro ao invés de moto. E se alguém precisar aprender a entregar pizzas, esse alguém vai me procurar e eu vou ensinar claramente como.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;"Um módulo é apenas um conjunto coeso de funções e estruturas de dados. Esta palavra "coeso" sugere o SRP. Coesão é a força que amarra o código responsável a um único ator"&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Robert C. Martin - Clean Architecture (Arquitetura Limpa) p/63&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;É completamente &lt;strong&gt;coeso&lt;/strong&gt;, por exemplo, termos uma classe &lt;code&gt;EntregadorDePizza&lt;/code&gt; com um método &lt;code&gt;entregar_pizza&lt;/code&gt; que recebe três objetos: &lt;code&gt;pizza&lt;/code&gt;, &lt;code&gt;cliente&lt;/code&gt; e &lt;code&gt;moto&lt;/code&gt;. E este método ter todo aquele comportamento que listamos. Afinal, não vamos procurar saber como o entregador entrega a pizza em outro ponto do código:&lt;/p&gt;

&lt;p&gt;Apenas um esboço …&lt;/p&gt;
&lt;pre&gt;
class EntregadorDePizza
  def entregar_pizza(pizza, cliente, moto)
    guardar_na_mochila(pizza)
    moto.ligar(chave_da_moto)
    moto.pilotar_com_segurança_até(cliente.endereço)
    interfonar()
    ser_educado_com_o(cliente)
  end

  private
	
  def chave_da_moto
	
  # ...

  def guardar_na_mochila(pizza)
	
  # ...
end
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Single Responsibility Principle&lt;/em&gt; é sobre isso.&lt;/p&gt;

&lt;p&gt;É sobre &lt;strong&gt;responsabilidade&lt;/strong&gt;, &lt;strong&gt;comportamento&lt;/strong&gt; e como os descrevemos de forma &lt;strong&gt;coesa&lt;/strong&gt;. Não sobre "fazer uma coisa só".&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;… "Esse princípio é importante no momento em que há uma alteração em alguma funcionalidade do software. Quando isso ocorre, o programador precisa procurar pelas classes que possuem a responsabilidade a ser modificada. Supondo uma classe que possua mais de uma razão para mudar, isso significa que ela é acessada por duas partes do software que fazem coisas diferentes. Fazer uma alteração em uma das responsabilidades dessa classe pode, de maneira não intencional, quebrar a outra parte de maneira inesperada. Isso torna o projeto de classes frágil"&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;Maurício Aniche - Test-Driven Development p/ 204&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="quebrando-nosso-single-responsibility-principle-e-os-problemas-que-o-originaram"&gt;Quebrando nosso Single Responsibility Principle e os problemas que o originaram&lt;/h3&gt;

&lt;p&gt;Imagine que você é &lt;em&gt;software engineer&lt;/em&gt; da pizzaria e precisa mudar no sistema a forma como a pizza é entregue (&lt;strong&gt;comportamento&lt;/strong&gt;), em quais classes você procuraria primeiro?:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;EntregarPizza&lt;/code&gt; ou &lt;code&gt;EntregadorDePizza&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cozinha&lt;/code&gt; ou &lt;code&gt;FornoDaCozinha&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;CalcularContabilidade&lt;/code&gt; ou &lt;code&gt;FolhaDePagamento&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Com certeza você escolheu a &lt;strong&gt;opção 1&lt;/strong&gt;, porque é o mais coeso.&lt;/p&gt;

&lt;p&gt;O primeiro problema que o SRP corrige é justamente a &lt;strong&gt;baixa coesão&lt;/strong&gt;. Se tivessemos uma classe chamada &lt;code&gt;CalcularContabilidade&lt;/code&gt; que tivesse o comportamento de "esquentar o forno da cozinha" estaríamos violando o SRP.&lt;/p&gt;

&lt;p&gt;Nenhum programador ou programadora vai pensar em abrir uma classe &lt;code&gt;CalcularContabilidade&lt;/code&gt; para mudar a "temperatura do forno da cozinha". É contra intuitivo. &lt;code&gt;CalcularContabilidade&lt;/code&gt; teria &lt;strong&gt;2 responsabilidades&lt;/strong&gt;: cuidar da cozinha e da contabilidade. &lt;strong&gt;Teria razões diferentes para mudar.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;O segundo maior problema é a complexidade que uma classe com muitas responsabilidades (lembrando que &lt;strong&gt;responsabilidade&lt;/strong&gt; não é &lt;strong&gt;comportamento&lt;/strong&gt;) pode ter. A tendência é a classe ficar difícil de dar manutenção e testar. Além de que dois contextos completamente diferentes podem interferir um no outro.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obs:.&lt;/em&gt; Repare também  que no exemplo da seção anterior, o método &lt;code&gt;entregar_pizza&lt;/code&gt; da classe &lt;code&gt;EntregadorDePizza&lt;/code&gt; sabe ligar a &lt;code&gt;moto&lt;/code&gt;, mas não sabe como a moto funciona por dentro quando ele liga. O comportamento do maquinário da moto não é responsabilidade do &lt;code&gt;EntregadorDePizza&lt;/code&gt;. Se o comportamento do maquinário tivesse nessa classe também, teríamos algo semelhante a essa imagem:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/motaur.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Sempre que quiséssemos dar manutenção na moto, teríamos que mexer no &lt;code&gt;EntregadorDePizza&lt;/code&gt;. O que para pessoas sãs não faz o mínimo sentido.&lt;/p&gt;

&lt;h3 id="a-formula-mgica-para-respeitar-o-srp"&gt;A formula mágica para respeitar o SRP&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Evite utilizar nomes genéricos dentro do seu &lt;em&gt;software&lt;/em&gt;, como &lt;em&gt;Services&lt;/em&gt; ou &lt;em&gt;Manager&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Em caso de dúvidas, pergunte-se:
    &lt;ul&gt;
      &lt;li&gt;A classe / módulo Y que tem a responsabilidade X deve responder pelo comportamento Z?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Antes de sair codando, reserve um tempo para pensar em como traduzir sua regra de negócio para estruturas (classes, módulos e funções) com nomenclaturas coesas. Use palavras que são comuns no dia a dia da sua equipe. Gosto de pensar que um software bem escrito é aquele que uma pessoa não técnica (PO, PM e Stakeholders) consegue abrir os arquivos e entender superficialmente o que está acontecendo.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="resumindo"&gt;Resumindo&lt;/h3&gt;

&lt;p&gt;Essas são as 5 principais mensagens que enfatizo com esse artigo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Responsabilidade não é o comportamento em si. É o dever de responder por um conjunto de comportamentos.&lt;/li&gt;
  &lt;li&gt;SRP é sobre &lt;strong&gt;responsabilidade&lt;/strong&gt;, &lt;strong&gt;comportamento&lt;/strong&gt; e como os descrevemos de forma &lt;strong&gt;coesa&lt;/strong&gt;. Não sobre fazer uma coisa só.&lt;/li&gt;
  &lt;li&gt;Coesão, acima de tudo, tem a ver com o nome que damos as variáveis, classes, módulos, funções e métodos em relação a o que eles fazem e/ou são.&lt;/li&gt;
  &lt;li&gt;Todo e qualquer padrão ou prática serve para &lt;strong&gt;simplificar para que consigamos trabalhar utilizando menos esforço cognitivo&lt;/strong&gt;, caso isso não aconteça, não devemos utilizar o padrão ou prática.&lt;/li&gt;
  &lt;li&gt;Cabe ao engenheiro de &lt;em&gt;software&lt;/em&gt;, dado um determinado contexto, encontrar a solução adequada e ideal para o problema, identificando quais padrões utilizar ou não, dado o prazo, tamanho do projeto e os objetivos de negócio.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id="alguns-links-legais--complementares-sobre-o-assunto"&gt;Alguns links legais / complementares sobre o assunto:&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://hackernoon.com/you-dont-understand-the-single-responsibility-principle-abfdd005b137"&gt;You dont understand the single responsibility principle (Hackernoon)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://softwareengineering.stackexchange.com/questions/150760/single-responsibility-principle-how-can-i-avoid-code-fragmentation"&gt;Single responsibility principle: how can i avoid code fragmentation (Stack Exchange Question)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.davidtanzer.net/david%27s%20blog/2017/07/26/the-single-responsibility-principle.html"&gt;The Single Responsibility Principle (David Tanzer)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html"&gt;Single reponsibility principle (Blog Clean Coder / Uncle Bob)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com.br/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=asc_df_0134494164/?tag=googleshopp00-20&amp;amp;linkCode=df0&amp;amp;hvadid=379726160779&amp;amp;hvpos=&amp;amp;hvnetw=g&amp;amp;hvrand=7253478441797173469&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=1001766&amp;amp;hvtargid=pla-423658477418&amp;amp;psc=1"&gt;Livro Clean Architecture (Link de compra da Amazon)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)"&gt;Cohesion (computer science) (Wikipedia)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.casadocodigo.com.br/products/livro-tdd-ruby"&gt;Livro TDD com Ruby (Casa do código)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com.br/C%C3%B3digo-limpo-Robert-C-Martin/dp/8576082675/ref=asc_df_8576082675/?tag=googleshopp00-20&amp;amp;linkCode=df0&amp;amp;hvadid=379792215563&amp;amp;hvpos=&amp;amp;hvnetw=g&amp;amp;hvrand=4192535749629342066&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=1001766&amp;amp;hvtargid=pla-398225630878&amp;amp;psc=1"&gt;Livro Clean Code (Link da Amazon)&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Elixir + Phoenix, programando na velocidade da luz</title>
    <link rel="alternate" href="https://truehenrique.com/2020/07/17/elixir-e-phoenix-na-velocidade-da-luz/"/>
    <id>https://truehenrique.com/2020/07/17/elixir-e-phoenix-na-velocidade-da-luz/</id>
    <published>2020-07-17T13:52:00-03:00</published>
    <updated>2021-07-29T21:49:29-03:00</updated>
    <author>
      <name>Henrique F. Teixeira</name>
    </author>
    <content type="html">&lt;div&gt;Hoje resolvi trazer alguns "pontos chave" sobre como podemos ser mais produtivos programando com &lt;em&gt;Elixir &lt;/em&gt;e &lt;em&gt;Phoenix&lt;/em&gt;, este post pode ser tanto para quem já tem alguma experiência com a linguagem quanto para quem está iniciando. Talvez você já conheça algumas dessas dicas, outras talvez descubra agora, mas o principal é compartilhar e aprender. vamos lá:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;1. Entenda todos os detalhes de &lt;strong&gt;&lt;em&gt;pattern matching&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;, &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;guards&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;, &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;keyword lists&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; e &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;structs&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;div&gt;Conhecendo-os temos um grande ganho em produtividade. Diria que &lt;em&gt;60%&lt;/em&gt; do código que lemos e escrevemos com a linguagem envolvem essas estruturas, vale a pena dedicar bastante tempo as explorando e estudando, dessa forma ganhamos muito mais "fluidez" no desenvolvimento das demandas do dia a dia.&lt;br /&gt;&lt;br /&gt;Veja alguns exemplos de detalhes que podem nos pegar de surpresa em determinado momento do nosso desenvolvimento&lt;strong&gt;:&lt;/strong&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;strong&gt;1.1 &lt;/strong&gt;&lt;em&gt;Pattern&lt;/em&gt; ma&lt;em&gt;tching&lt;/em&gt; com &lt;em&gt;structs&lt;/em&gt; funcionam dessa forma:&amp;nbsp;&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;iex(1)&amp;gt; %x{} = %MinhaStruct{}

%MinhaStruct{hello: nil}

iex(2)&amp;gt; x

MinhaStruct &lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Porém, não conseguimos criar structs através de variáveis:&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;iex(12)&amp;gt; x = MinhaStruct

MinhaStruct

iex(13)&amp;gt; %x{}

** (CompileError) iex:13: expected struct name to be a compile time atom or alias, got: x&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Caso isso seja necessário, devemos utilizar a função &lt;strong&gt;&lt;em&gt;struct&lt;/em&gt;&lt;/strong&gt;:&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;iex(13)&amp;gt; defmodule User do

...(13)&amp;gt; defstruct name: "john"

  ...(13)&amp;gt; end

  iex(14)&amp;gt; x = User

  iex(15)&amp;gt; struct(x)

  %User{name: "john"}&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;strong&gt;1.2 &lt;/strong&gt;Na definição de &lt;em&gt;guards&lt;/em&gt;, não podemos utilizar funções definidas no módulo:&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;iex(4)&amp;gt; defmodule Teste do

  ...(4)&amp;gt; def maiorquequatro(x), do: x &amp;gt; 4

  ...(4)&amp;gt; def verifica(numero) when maiorquequatro(numero), do: IO.puts("é maior que quatro") 

  ...(4)&amp;gt; def verifica(_numero), do: IO.puts("não é maior que quatro")                             

  ...(4)&amp;gt; end

  ** (CompileError) iex:6: cannot find or invoke local maiorquequatro/1 inside guard. Only macros can be invoked in a guard and they must be defined before their invocation. Called as: maiorquequatro(numero)&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Para utilizar funções customizadas em &lt;em&gt;guards&lt;/em&gt;, utilizamos macros:&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt; iex(9)&amp;gt; defmodule Teste do                                    

  ...(9)&amp;gt; defmacro maiorquequatro(numero) do

  ...(9)&amp;gt; quote do: unquote(numero) &amp;gt; 4                   

  ...(9)&amp;gt; end

  ...(9)&amp;gt; def verifica(numero) when maiorquequatro(numero), do: IO.puts("é maior que quatro")

  ...(9)&amp;gt; def verifica(_numero), do: IO.puts("não é maior que quatro")

  ...(9)&amp;gt; end

  iex(10)&amp;gt; Teste.verifica(2)

  não é maior que quatro

  :ok

  iex(11)&amp;gt; Teste.verifica(5)

  é maior que quatro

  :ok&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;strong&gt;1.3&lt;/strong&gt; &lt;em&gt;Pattern matching&lt;/em&gt; em &lt;em&gt;keyword lists&lt;/em&gt; funcionam dessa forma:&amp;nbsp;&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;iex(4)&amp;gt; [{:name, nome} | _] = [name: "henrique", id: 3]

  [name: "henrique", id: 3]

  iex(5)&amp;gt; nome

  "henrique"&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Lembrando que &lt;em&gt;keyword lists&lt;/em&gt; são um &lt;em&gt;syntax sugar&lt;/em&gt; para uma lista de tuplas...&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;iex(7)&amp;gt; [{:name, nome}, {:id, 3}] == [name: "henrique", id: 3]

  true&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Se quisessemos extrair somente o nome, por exemplo, não poderiamos fazer dessa maneira:&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;iex(6)&amp;gt; [{:name, nome}] = [name: "henrique", id: 3]    

  ** (MatchError) no match of right hand side value: [name: "henrique", id: 3]&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Aqui vão &lt;em&gt;links&lt;/em&gt; de estudo para se aprofundar bastante sobre esses temas:&lt;br /&gt;&lt;a href="https://hexdocs.pm/elixir/Kernel.html#defstruct/1"&gt;https://hexdocs.pm/elixir/Kernel.html#defstruct/1&lt;/a&gt;&lt;br /&gt;&lt;a href="https://hexdocs.pm/elixir/Kernel.html#struct/2"&gt;https://hexdocs.pm/elixir/Kernel.html#struct/2&lt;/a&gt;&lt;br /&gt;&lt;a href="https://www.poeticoding.com/the-beauty-of-pattern-matching-in-elixir/"&gt;https://www.poeticoding.com/the-beauty-of-pattern-matching-in-elixir/&lt;/a&gt;&lt;br /&gt;&lt;a href="https://joyofelixir.com/6-pattern-matching"&gt;https://joyofelixir.com/6-pattern-matching&lt;/a&gt;&lt;br /&gt;&lt;a href="https://elixir-lang.org/getting-started/pattern-matching.html"&gt;https://elixir-lang.org/getting-started/pattern-matching.html&lt;/a&gt;&lt;br /&gt;&lt;a href="https://elixir-lang.org/getting-started/keywords-and-maps.html"&gt;https://elixir-lang.org/getting-started/keywords-and-maps.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;2. Escreva um alias (autocomplete) na sua &lt;em&gt;IDE&lt;/em&gt; para o require &lt;em&gt;IEx; IEx.pry &lt;/em&gt;&lt;del&gt;por favor&lt;/del&gt;.&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Passamos bastante tempo "debugando" código nas aplicações, em qualquer linguagem. Felizmente o &lt;em&gt;Elixir&lt;/em&gt; conta com ferramentas muito boas para nos auxiliar. Uma das mais usadas requer o módulo &lt;strong&gt;IEx&lt;/strong&gt;:&lt;/div&gt;
&lt;pre&gt;&lt;code class="elixir"&gt;require IEx&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Dessa forma podemos criar um breakpoint que irá abrir um terminal quando o código passar por essa linha:&lt;/div&gt;
&lt;pre&gt;&lt;code class="elixir"&gt;def hello(), do: IEx.pry&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Porém, é comum esquecermos o&lt;strong&gt; require IEx &lt;/strong&gt;no início do arquivo, logo passamos a escrever:&lt;/div&gt;
&lt;pre&gt;&lt;code class="elixir"&gt;require IEx; IEx.pry&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;Acredite em mim, com o tempo você vai ficar cansado de escrever &lt;strong&gt;require IEx; IEx.pry&lt;/strong&gt; toda hora! Na minha &lt;em&gt;IDE&lt;/em&gt; tenho um alias que funciona da seguinte maneira, quando escrevo "pry" e salvo o arquivo ou dou um espaço ela automaticamente completa com o resto.&lt;br /&gt;&lt;br /&gt;Se a sua &lt;em&gt;IDE&lt;/em&gt; de preferência for o &lt;em&gt;VIM&lt;/em&gt; (assim como a minha), adicione esse trecho de configuração no seu &lt;strong&gt;~/.vimrc:&lt;/strong&gt;&amp;nbsp;&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;abbr pry require IEx; IEx.pry&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Faça isso e seja feliz!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;3. Rode testes com&lt;strong&gt; iex -S mix test --trace &lt;/strong&gt;para não dar timeout na sessão do &lt;strong&gt;IEx&lt;/strong&gt;&amp;nbsp;&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Quando vamos debugar algum ponto do código por um tempo mais longo (utilizando o&lt;em&gt; &lt;/em&gt;&lt;strong&gt;&lt;em&gt;require IEx; IEx.pry &lt;/em&gt;&lt;/strong&gt;com os testes), o ideal é usar o comando acima ou alterar o tempo limite da sessão, caso contrário sua sessão encerrará em 60 segundos.&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;** (ExUnit.TimeoutError) test timed out after 60000ms. You can change the timeout:&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Inclusive, também seria interessante criar um alias para esse comando, no seu terminal (&lt;strong&gt;&lt;em&gt;~/.bashrc&lt;/em&gt;&lt;/strong&gt;)&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;alias mixtest="iex -S mix test --trace"&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;&lt;br /&gt;4. Domine a biblioteca &lt;strong&gt;&lt;em&gt;Plug&lt;/em&gt;&lt;/strong&gt;&amp;nbsp;&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;A biblioteca &lt;em&gt;Plug&lt;/em&gt; é uma das principais "portas de entrada" para o &lt;em&gt;Elixir&lt;/em&gt; na &lt;em&gt;web&lt;/em&gt;, inclusive, o &lt;em&gt;framework Phoenix&lt;/em&gt; foi construído baseado nela. Ter domínio e confiança em sua utilização nos trás mais segurança e assertividade nas decisões tomadas em projetos &lt;em&gt;Phoenix&lt;/em&gt;.&lt;br /&gt;&lt;br /&gt;&lt;em&gt;links&lt;/em&gt; para estudo: &lt;br /&gt;&lt;a href="https://ieftimov.com/post/a-deeper-dive-in-elixir-plug/"&gt;https://ieftimov.com/post/a-deeper-dive-in-elixir-plug/&lt;/a&gt;&lt;br /&gt;&lt;a href="https://elixirschool.com/pt/lessons/specifics/plug/"&gt;https://elixirschool.com/pt/lessons/specifics/plug/&lt;/a&gt;&lt;br /&gt;&lt;a href="https://hexdocs.pm/plug/readme.html"&gt;https://hexdocs.pm/plug/readme.html&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;5. Conheça essas dicas do &lt;strong&gt;IEx&lt;/strong&gt;:&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;&lt;strong&gt;5.1&lt;/strong&gt; É possível escrever um arquivo de ajuda para iniciar automaticamente variáveis e tudo o que queremos quando abrirmos o terminal do &lt;strong&gt;IEx &lt;/strong&gt;em um projeto. Basta criar um arquivo chamado &lt;strong&gt;&lt;em&gt;.iex.exs &lt;/em&gt;&lt;/strong&gt;na raiz do projeto, exemplo:&lt;/div&gt;
&lt;pre&gt;&lt;code class="elixir"&gt;# Importe funções e módulos

import_if_available(MinhaApp.MeuModulo)



# De print em algo antes do terminal iniciar

  IO.puts("hello world")



# Faça o bind de variáveis que ficarão disponíveis no terminal

  value = 13&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;strong&gt;5.2&lt;/strong&gt; Existem diversas funções disponíveis no &lt;strong&gt;IEx&lt;/strong&gt; que podem nos deixar mais produtivos, veja alguma delas:&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;  • b/1            - prints callbacks info and docs for a given module

  • c/1            - compiles a file into the current directory

  • c/2            - compiles a file to the given path

  • cd/1           - changes the current directory

  • clear/0        - clears the screen

  • exports/1      - shows all exports (functions + macros) in a module

  • flush/0        - flushes all messages sent to the shell

  • h/0            - prints this help message

  • h/1            - prints help for the given module, function or macro

  • i/0            - prints information about the last value

  • i/1            - prints information about the given term

  • ls/0           - lists the contents of the current directory

  • ls/1           - lists the contents of the specified directory

  • open/1         - opens the source for the given module or function in

  your editor

  • pid/1          - creates a PID from a string

  • pid/3          - creates a PID with the 3 integer arguments passed

  • ref/1          - creates a Reference from a string

  • ref/4          - creates a Reference with the 4 integer arguments

  passed

  • pwd/0          - prints the current working directory

  • r/1            - recompiles the given module's source file

  • recompile/0    - recompiles the current project

• runtime_info/0 - prints runtime info (versions, memory usage, stats)

  • v/0            - retrieves the last value from the history

  • v/1            - retrieves the nth value from the history&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;&lt;strong&gt;5.3&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;Tab&lt;/em&gt;&lt;/strong&gt; completa o nome de módulos, funções e também mostra os métodos quando finalizamos um nome com ".":&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt; iex(9)&amp;gt; Enum.

  EmptyError           OutOfBoundsError     all?/1               

  all?/2               any?/1               any?/2                   

  ...&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Os exemplos foram retirados da documentação do &lt;strong&gt;IEx&lt;/strong&gt;: &lt;a href="https://hexdocs.pm/iex/IEx.html#module-the-iex-exs-file"&gt;https://hexdocs.pm/iex/IEx.html#module-the-iex-exs-file&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;6. Conheça e utilize os diversos plugins para &lt;em&gt;Elixir&lt;/em&gt; e &lt;em&gt;Phoenix&lt;/em&gt; na sua &lt;em&gt;IDE&lt;/em&gt;&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Não se limite ao básico! Os plugins existem para serem utilizados, abuse deles!&lt;br /&gt;&lt;br /&gt;Se você é usuário do &lt;em&gt;VSCode&lt;/em&gt;, este artigo tem dicas muito boas: &lt;a href="https://thinkingelixir.com/elixir-in-vs-code/"&gt;https://thinkingelixir.com/elixir-in-vs-code/&lt;/a&gt;&lt;br /&gt;Para o &lt;em&gt;VIM, de uma lida aqui&lt;/em&gt;: &lt;a href="https://medium.com/@siever/setup-vim-for-elixir-development-280a01150152"&gt;https://medium.com/@siever/setup-vim-for-elixir-development-280a01150152&lt;/a&gt;&lt;br /&gt;Para o Atom: &lt;a href="https://atom.io/packages/atom-elixir"&gt;https://atom.io/packages/atom-elixir&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;7. Seguindo as dicas acima e utilizando a biblioteca &lt;a href="https://github.com/henriquefernandez/phoenix_up"&gt;&lt;strong&gt;&lt;em&gt;phoenix_up&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, chegaremos a&lt;em&gt; &lt;/em&gt;&lt;strong&gt;&lt;em&gt;"299.792.458&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; &lt;/strong&gt;&lt;strong&gt;&lt;em&gt;features"&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt; por segundo!&lt;/strong&gt;:&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;&lt;a href="https://github.com/henriquefernandez/phoenix_up"&gt;&lt;strong&gt;&lt;em&gt;phoenix_up&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;a&lt;/em&gt;diciona mais &lt;em&gt;generators&lt;/em&gt; para desenvolver projetos &lt;em&gt;Phoenix&lt;/em&gt;, basicamente, com essa biblioteca não teremos mais o trabalho de escrever arquivo por arquivo e estruturas repetitivas como: "&lt;em&gt;BlaController, BlaView, templates/bla, BlaControllerTest&lt;/em&gt;" e etc.. Nos meus projetos, eu sempre uso!&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;Concluindo..&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Apesar de algumas dicas serem mais "práticas", podemos perceber que outras são pontos onde vale a pena reforçar o estudo! Particularmente, hoje me sinto bastante confortável e produtivo com &lt;em&gt;Elixir e Phoenix, e&lt;/em&gt; isso foi graças a esse equilíbrio de buscar ferramentas que me auxiliassem e estudar a fundo pontos fundamentais!
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>PWA com Elixir e Phoenix em 5 minutos</title>
    <link rel="alternate" href="https://truehenrique.com/2020/03/04/pwa-com-elixir-e-phoenix-em-5-minutos/"/>
    <id>https://truehenrique.com/2020/03/04/pwa-com-elixir-e-phoenix-em-5-minutos/</id>
    <published>2020-03-04T12:51:00-03:00</published>
    <updated>2021-07-29T21:49:32-03:00</updated>
    <author>
      <name>Henrique F. Teixeira</name>
    </author>
    <content type="html">&lt;div&gt;Construir um &lt;em&gt;PWA (Progressive Web App)&lt;/em&gt; é uma maneira de possibilitar que sua aplicação &lt;em&gt;web &lt;/em&gt;escrita em &lt;em&gt;html&lt;/em&gt;, &lt;em&gt;css&lt;/em&gt; e &lt;em&gt;javascript&lt;/em&gt; funcione praticamente como um aplicativo para &lt;em&gt;smartphones&lt;/em&gt;, &lt;em&gt;desktops &lt;/em&gt;e&lt;em&gt; tablets&lt;/em&gt; podendo inclusive ser instalada, ter &lt;em&gt;"push notifications" &lt;/em&gt;e funcionamento completamente &lt;em&gt;offline&lt;/em&gt;. Nesse &lt;em&gt;post&lt;/em&gt; não vou me aprofundar tanto no conceito, mas mostrarei como é simples e rápido transformar um projeto &lt;em&gt;Elixir&lt;/em&gt; e &lt;em&gt;Phoenix&lt;/em&gt; em um &lt;em&gt;PWA.&lt;/em&gt;&amp;nbsp;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;Vamos aos passos para criar o seu &lt;em&gt;PWA&lt;/em&gt; com &lt;em&gt;Elixir e Phoenix&lt;/em&gt;:&lt;/div&gt;
&lt;h3&gt;&lt;br /&gt;&lt;/h3&gt;
&lt;h3&gt;Passo 1:&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Adicione um arquivo chamado &lt;strong&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;/strong&gt; no seu&lt;em&gt; priv/static &lt;/em&gt;contendo o seguinte conteúdo:&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class="javascript"&gt;{

  "short_name": "My App", // Nome em que aparecerá junto ao ícone

  "name": "My Very Progressive Web App @PWA", // Descrição que aparecerá enquanto o aplicativo é carregado

  "icons": [ // Coloque aqui a localização dos ícones do seu aplicativo

    {

      "src": "/images/logo.png",  

      "type": "image/png"

    }

  ],

  "start_url": "/", // Aqui vai o endereço principal do seu aplicativo (o que irá ser acessado primeiro quando abrirmos o app)

  "background_color": "#fff", // Definimos uma cor de fundo enquanto ao aplicativo é carregado.

  "display": "standalone", // Definimos o modo primário que o navegador deve considerar para exibir o aplicativo.

  "scope": "/", // Definimos o escopo, limite, das páginas a serem consideradas como PWA

  "theme_color": "#000"   // Definimos uma cor para personalizar a interface do dispositivo em uso

} 

            &lt;em&gt;                                 &lt;/em&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Este arquivo é o responsável por personalizar a aparência do nosso &lt;em&gt;PWA&lt;/em&gt; e um pouco da experiência de uso. Além das configurações setadas acima, também podemos adicionar as seguintes:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;lang&lt;/em&gt;: Definimos o idioma utilizado (ex: &lt;em&gt;pt-BR&lt;/em&gt;).&lt;/li&gt;&lt;li&gt;&lt;em&gt;orientation&lt;/em&gt;: Definimos a orientação de como exibir o aplicativo (ex: &lt;em&gt;any, natural, landscape, landscape-primary, landscape-secondary, portrait, portrait-primary, portrait-secondary&lt;/em&gt;).&lt;/li&gt;&lt;li&gt;&lt;em&gt;prefer_related_applications&lt;/em&gt;: Informa se há uma outra aplicação complementar (&lt;em&gt;Boolean&lt;/em&gt;).&lt;/li&gt;&lt;li&gt;&lt;em&gt;related_applications&lt;/em&gt;: Definimos as aplicações complementares (&lt;em&gt;Array&lt;/em&gt; de objetos de aplicações com os possíveis valores: &lt;em&gt;platform, url e id&lt;/em&gt;).&lt;/li&gt;&lt;li&gt;&lt;em&gt;dir&lt;/em&gt;: Definimos a direção do texto nas especifcações do manifesto.&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&lt;br /&gt;Para agilizar o processo de criação do nosso &lt;strong&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;/strong&gt; podemos recorrer a ferramentas de automatização. Esse site é bem eficiente e também nos ajuda a gerar os ícones formatados:&lt;br /&gt;&lt;br /&gt;&lt;a href="https://app-manifest.firebaseapp.com/"&gt;https://app-manifest.firebaseapp.com/&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;Passo 2:&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Adicione um arquivo chamado &lt;strong&gt;&lt;em&gt;service_worker.js&lt;/em&gt;&lt;/strong&gt; no seu &lt;em&gt;priv/static&lt;/em&gt; contendo o seguinte conteúdo:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class="javascript"&gt;self.addEventListener('install', function(e) {

  e.waitUntil(

    fetch('/cache_manifest.json')

    .then(function(response) {

      return response.json()

    })  

    .then(function(cacheManifest) {

      var cacheName = 'cache:static:' + cacheManifest.version

      var all = Object.values(cacheManifest.latest).filter(

        function(fn) { return fn.match(/^(images|css|js|fonts)/);

        })

      caches.open(cacheName).then(function(cache) {

        return cache.addAll(all).then(function() {

          self.skipWaiting();

        });

      })

    })

  );

});



self.addEventListener('fetch', function(event) {

  event.respondWith(

    caches.match(event.request).then(function(response) {

      if (response) {

        return response;

      }

      return fetch(event.request);

    })

  );

});&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;blockquote&gt;Essencialmente, um &lt;em&gt;service worker&lt;/em&gt; se comporta como um servidor &lt;em&gt;proxy&lt;/em&gt; situado entre uma aplicação web, o navegador e a rede (quando esta estiver disponível). Eles servem, dentre outras coisas, para possibilitar a criação de experiências &lt;em&gt;offline&lt;/em&gt; eficientes, interceptar requisições de rede – agindo adequadamente de acordo com o &lt;em&gt;status&lt;/em&gt; atual da conexão – e atualizar os &lt;em&gt;assets&lt;/em&gt; que residem no servidor. Service workers também permitem o acesso às APIs de &lt;em&gt;push notification&lt;/em&gt; e &lt;em&gt;background sync&lt;/em&gt;.&lt;br /&gt;&lt;br /&gt;- &lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/API/Service_Worker_API"&gt;https://developer.mozilla.org/pt-BR/docs/Web/API/Service_Worker_API&lt;/a&gt;&lt;/blockquote&gt;
&lt;div&gt;&lt;br /&gt;No nosso caso, estamos escutando a dois eventos &lt;em&gt;"install" e "fetch"&lt;/em&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;ul&gt;&lt;li&gt;&lt;em&gt;install&lt;/em&gt;: Na hora da instalação do aplicativo informamos a localização do nosso&lt;strong&gt;&lt;em&gt; cache_manifest.json. &lt;/em&gt;&lt;/strong&gt;Uma vantagem de utilizar o&lt;em&gt; framework Phoenix &lt;/em&gt;para &lt;em&gt;PWA's &lt;/em&gt;é que ele gera automaticamente este arquivo quando rodamos a &lt;em&gt;task &lt;/em&gt;&lt;strong&gt;&lt;em&gt;mix phx.digest&lt;/em&gt;&lt;/strong&gt;! Este arquivo é responsável por informar dados de &lt;em&gt;cache&lt;/em&gt; que são utilizados para o aplicativo funcionar de forma mais rápida, econômica e até de maneira &lt;em&gt;offline &lt;/em&gt;dependendo do caso.&lt;/li&gt;&lt;li&gt;&lt;em&gt;fetch&lt;/em&gt;: É disparado quando houver uma visita a uma &lt;em&gt;url&lt;/em&gt;, se já tivermos cache, responde com o cache, se não executamos o fluxo normal.&lt;/li&gt;&lt;/ul&gt;
&lt;div&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;Passo 3:&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Permita que os arquivos &lt;strong&gt;&lt;em&gt;service_worker.js&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;cache_manifest.json &lt;/em&gt;&lt;/strong&gt;e &lt;strong&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;/strong&gt; sejam acessados de forma estática, adicionando nas configurações de &lt;strong&gt;&lt;em&gt;Plug.Static&lt;/em&gt;&lt;/strong&gt;, encontradas no módulo &lt;strong&gt;&lt;em&gt;Endpoint&lt;/em&gt;&lt;/strong&gt; do seu projeto encontrado em&lt;em&gt; (lib/seu_projeto_web/endpoint.ex):&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class="elixir"&gt;plug Plug.Static,

  at: "/",

  from: :seu_projeto,

  gzip: false,

  only: ~w(css fonts images js favicon.ico robots.txt service_worker.js cache_manifest.json manifest.json) # aqui&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;h3&gt;Passo 4:&lt;/h3&gt;
&lt;div&gt;&lt;br /&gt;Adicione um link para o seu &lt;strong&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;/strong&gt; e o seguinte script no layout principal do seu projeto:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;link rel="manifest" href="/manifest.json"&amp;gt;

&amp;lt;script&amp;gt;

  if (navigator.serviceWorker) {

    navigator.serviceWorker.register('/service_worker.js', { scope: './' })

      .then(function(reg) {

        console.log('[ServiceWorker]', 'Service worker registered!');

        console.log(reg);

      });

  }

&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;&lt;br /&gt;Este &lt;em&gt;script&lt;/em&gt; basicamente registra o nosso &lt;em&gt;service worker &lt;/em&gt;no navegador.&lt;br /&gt;&lt;br /&gt;É isso! nossa &lt;em&gt;PWA&lt;/em&gt; está pronta. &lt;br /&gt;&lt;br /&gt; fontes:&lt;br /&gt;&lt;em&gt;&lt;br /&gt;&lt;/em&gt;&lt;a href="https://www.botsquad.com/2018/03/07/phoenix-sw/"&gt;&lt;em&gt;https://www.botsquad.com/2018/03/07/phoenix-sw/&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&lt;br /&gt;&lt;/em&gt;&lt;a href="https://blog.apiki.com/web-app-manifest/"&gt;&lt;em&gt;https://blog.apiki.com/web-app-manifest/&lt;/em&gt;&lt;/a&gt;&lt;a href="https://gobacklog.com/blog/progressive-web-apps/"&gt;&lt;em&gt;&lt;br /&gt;https://gobacklog.com/blog/progressive-web-apps/&lt;/em&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;&lt;a href="https://vizir.com.br/2017/08/o-que-e-pwa-progressive-web-app-porque-isso-pode-aumentar-seus-resultados-mobile/"&gt;&lt;em&gt;https://vizir.com.br/2017/08/o-que-e-pwa-progressive-web-app-porque-isso-pode-aumentar-seus-resultados-mobile/&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&lt;br /&gt;&lt;/em&gt;&lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/API/Service_Worker_API"&gt;&lt;em&gt;https://developer.mozilla.org/pt-BR/docs/Web/API/Service_Worker_API&lt;/em&gt;&lt;/a&gt;&lt;/div&gt;

</content>
  </entry>
</feed>
